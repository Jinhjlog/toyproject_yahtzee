<html>
<head>
  <meta charset='utf-8' />
  <title>App</title>
  <link href='css/styles.css' rel='stylesheet' />
  <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"
          integrity="sha384-KAZ4DtjNhLChOB/hxXuKqhMLYvx3b5MlT55xPEiNmREKRzeEm+RVPlTnAn0ajQNs"
          crossorigin="anonymous"></script>
  <style>
    table {
      border: 1px solid black;
    }
    td {
      border: 1px solid black;
      text-align: center;
    }
  </style>
</head>
<body>
<h1>room</h1>


<h3>대기 중인 유저 목록</h3>
<div id="userList">
  <ul>

  </ul>
</div>

<button id="testbtn">test</button>

<h2> 준비, 시작 버튼</h2>
<div id="gameSetBtn">
  <button id="readyBtn">준비</button>
  <button id="startBtn">시작</button>
</div>
<div id="userScoreBoard">
  <ul>
  </ul>
</div>
<hr>
<br>

<table id="diceTable" style="border: 1px solid black">
  <tr id="diceBtnTr">
    <td><button>주사위 1 선택</button></td>
    <td><button>주사위 2 선택</button></td>
    <td><button>주사위 3 선택</button></td>
    <td><button>주사위 4 선택</button></td>
    <td><button>주사위 5 선택</button></td>
  </tr>
  <tr id="diceViewTr">
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</table>
<hr>
<div id="putDiceDiv">
  <h4>선택한 주사위 다시 던지기</h4>
  <button>다시 던지기</button>
</div>

<div id="scoreBoardDiv">
  <h3>점수판</h3>
  <table id="diceScoreTable">
    <tr>
      <td>ones</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>twos</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>threes</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>fours</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>fives</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>sixes</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>bonus</td>
      <td></td>
    </tr>
    <tr>
      <td>triple</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>four_card</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>full_house</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>small_straight</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>large_straight</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>chance</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
    <tr>
      <td>yahtzee</td>
      <td></td>
      <td><button>선택</button></td>
      <td></td>
    </tr>
  </table>

</div>
</body>
<script>
  //const url = (window.location.href).replace('3000', '3131')
  //const socket = io(url);




  const socket = io("http://localhost:3131")

  // const token1m = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo0LCJ1c2VyX2VtYWlsIjoiZW1haWw2IiwidXNlcl9uYW1lIjoibmFtZSIsImlhdCI6MTY3OTI3OTI5NiwiZXhwIjoxNjc5Mjc5MzU2fQ.xsrr-OEsGylyZ5FyssHTBUj0rCN4t-Oys3U14xupfn0';
  // 소켓에 토큰 입력
  // const socket = io("http://localhost:3131", {
  //   query: {
  //     // token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo0LCJ1c2VyX2VtYWlsIjoiZW1haWw2IiwidXNlcl9uYW1lIjoibmFtZSIsImlhdCI6MTY3OTI3ODQ1MiwiZXhwIjoxNjc5Mjg5MjUyfQ.QLt27c9Fdjkv_sErS0Tyrh_p9gPRAJlyx6YAMEKhmg8'
  //     // token: token1m
  //   }
  // });


  // 인스턴스
  // let ip = document.location.href.replace('3000', '3131');
  // const socket = io(`http://3.34.138.148:3131/`);
  // console.log(ip)

  const temp_id = Math.floor(Math.random() * 9999) + 1;
  const userName = 'test' + temp_id.toString();

  const userList = document.getElementById('userList');
  const userList_ul = userList.querySelector('ul');

  const startBtn = document.getElementById('startBtn') ;
  const readyBtn = document.getElementById('readyBtn');
  const gameSetDiv = document.getElementById('gameSetBtn');

  const diceTable = document.getElementById('diceTable');
  const diceBtnTr = document.getElementById('diceBtnTr');
  let putDiceArr = [false, false, false, false, false];
  const diceViewTr = document.getElementById('diceViewTr');

  const putDiceDiv = document.getElementById('putDiceDiv');

  const endTurnBtn = document.getElementById('endTurnBtn');

  const diceScoreTable = document.getElementById('diceScoreTable');

  let diceResult;

  const userScoreBoard = document.getElementById('userScoreBoard');

  if(searchParam('role') == 'host') {
    socket.emit('hostCreateRoom', {
      userId: temp_id,
      userName: userName,
      roomNumber: searchParam('roomNumber')
    })
  }else {
    socket.emit('joinRoom', {
      userId: temp_id,
      roomNumber: searchParam('roomNumber'),
      userName: userName //
    })
    /*
    socket.emit('setPlayInfo', {
      userId: temp_id,
      userRole : 'user',
      roomNumber: searchParam('roomNumber'),
      userName: userName //
    })*/
  }


  socket.on('userJoinRoom', (data) => {
    console.log(data);
  })

  socket.on('refreshUserList', (data) => {
    console.log(data);
    userList_ul.innerHTML = '';
    for(let i =0;i<data.userInfo.length; i++){
      const li = document.createElement('li');
      li.innerText = `${data.userInfo[i].userRole} : ${data.userInfo[i].userName} ==> ${data.userInfo[i].userState}`
      userList_ul.appendChild(li);
    }
  })

  function searchParam(key) {
    return new URLSearchParams(location.search).get(key);
  }

  socket.on('disconnectHost', ()=> {
    location.href = '/'
  })

  socket.on('disconnectUser', (data)=> {
    console.log(data);
  })

  startBtn.addEventListener('click', () => {
    socket.emit('gameReadyBtn')
  })

  readyBtn.addEventListener('click', () => {
    socket.emit('setUserReady')
  })

  socket.on('gameStart', (data) => {
    console.log(data);
    if(data.state == 1) {
      let diceBtn = document.createElement("button");
      diceBtn.innerText = '주사위 던지기';
      diceBtn.onclick = function() {
        socket.emit('throwDice')
      }
      gameSetDiv.innerText = '';
      gameSetDiv.appendChild(diceBtn);
    }else {
      console.log(data.message)
    }
  })

  // 주사위 순서
  socket.on('diceTurn', (data) => {
    console.log(data)
  })


  // 던진 주사위 서버로부터 데이터 받기
  socket.on('throwDice', (data) => {
    console.log(data);

    if(data.state == 0){
      console.log(data.message);
    }else {
      console.log(data.message);
      console.log(data.diceResult);
      diceResult = data.diceResult;
      //console.log(data.diceResult[3])
      // for(let i = 0;i<data.diceResult.length; i++) {
      //   diceViewTr.querySelector(`td:nth-child(${(i+1)})`).innerText = data.diceResult[i];
      // }
      console.log(data.scoreBoard);
      refreshDiceView(data)
      refreshScoreBoard(data.scoreBoard.scoreValue)
      pickedScore(data.scoreBoard.picked)
    }
  })

  for(let i = 0;i<5;i++){
    diceBtnTr.querySelector(`td:nth-child(${(i+1)}) > button`).onclick = function () {
      if(!putDiceArr[i]){
        putDiceArr[i] = true;
      } else {
        putDiceArr[i] = false;
      }
      console.log(putDiceArr)
    }
  }

  putDiceDiv.querySelector('button').onclick = function() {
    let arr = [];
    for(let i = 0;i<putDiceArr.length; i++){
      if(putDiceArr[i]){
        arr.push(i);
      }
    }
    console.log('putIndex', arr);
    socket.emit('putDice', {
      diceResult: diceResult,
      diceIndex: arr,
    })
    putDiceArr = [false, false, false, false, false];
    arr = [];
  }




  socket.on('putDice', (data) => {
    console.log(data)
    if(data.state == 1) {
      console.log(data.message);
      // console.log(data.diceResult);
      diceResult = data.diceResult;
      refreshDiceView(data)
      refreshScoreBoard(data.scoreBoard.scoreValue)
      pickedScore(data.scoreBoard.picked)
      //console.log(data.scoreBoard);
      putDiceArr = [false, false, false, false, false];
    } else {
      console.log(data.message);
      putDiceArr = [false, false, false, false, false];
    }
  })

  function refreshDiceView(data){
    for(let i = 0;i<data.diceResult.length; i++) {
      diceViewTr.querySelector(`td:nth-child(${(i+1)})`).innerText = '';
    }
    diceViewTr.querySelector(`td:nth-child(1)`).innerText = data.diceResult.firstDice;
    diceViewTr.querySelector(`td:nth-child(2)`).innerText = data.diceResult.secDice;
    diceViewTr.querySelector(`td:nth-child(3)`).innerText = data.diceResult.trdDice;
    diceViewTr.querySelector(`td:nth-child(4)`).innerText = data.diceResult.fothDice;
    diceViewTr.querySelector(`td:nth-child(5)`).innerText = data.diceResult.fithDice;

  }



  function refreshScoreBoard(data){
    const scoreArr = [];
    scoreArr.push(data.ones);
    scoreArr.push(data.twos);
    scoreArr.push(data.threes);
    scoreArr.push(data.fours);
    scoreArr.push(data.fives);
    scoreArr.push(data.sixes);
    scoreArr.push(data.bonus)
    scoreArr.push(data.triple);
    scoreArr.push(data.four_card);
    scoreArr.push(data.full_house);
    scoreArr.push(data.small_straight);
    scoreArr.push(data.large_straight);
    scoreArr.push(data.chance);
    scoreArr.push(data.yahtzee);

    for(let i = 0; i< scoreArr.length; i++){
      diceScoreTable.querySelector(`tr:nth-child(${i+1}) td:nth-child(2)`).innerText = scoreArr[i];
    }
  }

  for(let i = 0;i< 6; i++){
    diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(3) > button`).addEventListener('click', () => {
      const scoreVal = diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(2)`).innerText;
      const scoreType = diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(1)`).innerText;
      console.log(scoreVal);
      console.log(scoreType);

      socket.emit('saveScore', {
        scoreType: scoreType,
        scoreValue: scoreVal,
      })
    })
  }
  for(let i = 7;i< 14; i++){
    diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(3) > button`).addEventListener('click', () => {
      const scoreVal = diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(2)`).innerText;
      const scoreType = diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(1)`).innerText;
      console.log(scoreVal);
      console.log(scoreType)
      socket.emit('saveScore', {
        scoreType: scoreType,
        scoreValue: scoreVal,
      })
    })
  }

  const testbtn = document.getElementById('testbtn');

  testbtn.addEventListener('click', () => {
    socket.emit('serverConsoleView', searchParam('roomNumber'));
  })

  socket.on('error', (data) => {
    console.log(data.message)
  })

  socket.on('userScoreBoard', (data) => {
    refreshScoreBoard(data)
    console.log(data);
    for(let i = 0;i< 6; i++){
      diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(${4})`).innerText = '';
    }
    for(let i = 7;i< 14; i++){
      diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(${4})`).innerText = '';
    }

    // for(let i = 0;i<14; i++){
    //   diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(${4})`).innerText = '';
    // }
  })

  function pickedScore(data){
    // for(let i = 0;i<14; i++){
    //   diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(${4})`).innerText = '';
    // }

    for(let i = 0;i<14;i++){
      for(let j = 0;j<data.length;j++){
        if(diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(${1})`).innerText == data[j]){
          diceScoreTable.querySelector(`tr:nth-child(${i+1}) > td:nth-child(${4})`).innerText = '입력됨';
        }

      }
    }
  }

  socket.on('userScoreInfo', (data) => {
    const userScoreBoardUl = userScoreBoard.querySelector('ul')
    userScoreBoardUl.innerHTML = '';
    console.log(data);
    for(let i = 0;i<data.length;i++){
      const li = document.createElement('li');
      li.innerText = `${data[i].userName} : ${data[i].userScore}`
      userScoreBoardUl.appendChild(li);
    }
  })

  socket.on('gameEnd', (data) => {
    console.log('게임 끝')
    console.log(data);
    let str ='\n';
    for(let i = 0;i<data.length; i++){
      str += `${i+1}. ${data[i].userName} : ${data[i].userScore}\n`
    }
    alert(`결과\n${str}`)
    location.href = '/';
  })



  socket.on('joinError', () => {
    location.href = '/'
    alert('참여할 수 없음')
  })

  socket.on('tokenError', () => {
    location.href = '/';
    alert('실패')
  })


  socket.on('changeHost', () => {
    console.log('방장 변경')
    socket.emit('changeHost');
  })

</script>
</html>