<html>
<head>
  <meta charset='utf-8' />
  <title>App</title>
  <link href='css/styles.css' rel='stylesheet' />
  <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"
          integrity="sha384-KAZ4DtjNhLChOB/hxXuKqhMLYvx3b5MlT55xPEiNmREKRzeEm+RVPlTnAn0ajQNs"
          crossorigin="anonymous"></script>
</head>
<body>
<h1>room</h1>


<h3>대기 중인 유저 목록</h3>
<div id="userList">
  <ul>

  </ul>
</div>

<button id="testbtn">test</button>

<h2> 준비, 시작 버튼</h2>
<div id="gameSetBtn">
  <button id="readyBtn">준비</button>
  <button id="startBtn">시작</button>
</div>

</body>
<script>
  //const url = (window.location.href).replace('3000', '3131')
  //const socket = io(url);
  const socket = io("http://localhost:3131");

  const temp_id = Math.floor(Math.random() * 9999) + 1;
  const userName = 'test' + temp_id.toString();

  const userList = document.getElementById('userList');
  const userList_ul = userList.querySelector('ul');

  const startBtn = document.getElementById('startBtn') ;
  const readyBtn = document.getElementById('readyBtn');
  const gameSetDiv = document.getElementById('gameSetBtn');

  if(searchParam('role') == 'host') {
    socket.emit('hostCreateRoom', {
      userId: temp_id,
      userRole : 'host',
      userName: userName,
      roomNumber: searchParam('roomNumber')
    })
  }else {
    socket.emit('joinRoom', {
      roomNumber: searchParam('roomNumber')
    })
    socket.emit('setPlayInfo', {
      userId: temp_id,
      userRole : 'user',
      roomNumber: searchParam('roomNumber'),
      userName: userName //
    })
  }


  socket.on('userJoinRoom', (data) => {
    console.log(data);

  })

  socket.on('refreshUserList', (data) => {
    console.log(data);
    userList_ul.innerHTML = '';
    for(let i =0;i<data.userInfo.length; i++){
      const li = document.createElement('li');
      li.innerText = `${data.userInfo[i].userRole} : ${data.userInfo[i].userName} ==> ${data.userInfo[i].userState}`
      userList_ul.appendChild(li);
    }
  })

  function searchParam(key) {
    return new URLSearchParams(location.search).get(key);
  }

  socket.on('disconnectHost', ()=> {
    location.href = '/'
  })

  socket.on('disconnectUser', (data)=> {
    console.log(data);
  })

  startBtn.addEventListener('click', () => {
    socket.emit('hostGameStart', {
      roomNumber: searchParam('roomNumber'),
    })
  })

  readyBtn.addEventListener('click', () => {
    socket.emit('setUserReady', {
      roomNumber: searchParam('roomNumber'),
    })
  })

  socket.on('gameStart', (data) => {
    console.log(data);
    if(data == '시작') {
      let diceBtn = document.createElement("button");
      diceBtn.innerText = '주사위 던지기';
      diceBtn.onclick = function() {
        console.log('asdas');
      }
      gameSetDiv.innerText = '';
      gameSetDiv.appendChild(diceBtn);
    }
  })

  const testbtn = document.getElementById('testbtn');

  testbtn.addEventListener('click', () => {
    socket.emit('serverConsoleView', searchParam('roomNumber'));
  })




</script>
</html>